import java.util.Arrays;

public class RedHopfield {  // Nombre de la clase en español
    private int[][] pesos;  // Matriz de pesos sinápticos (equivale a 'weights')
    private int tamano;     // Número de neuronas en la red (equivale a 'size')

    // Constructor: Inicializa la red con el tamaño adecuado
    public RedHopfield(int n) {
        this.tamano = n;
        this.pesos = new int[n][n];  // Inicializamos la matriz de pesos a 0
    }

    // Entrenamiento de la red: Ajuste de los pesos usando la regla de Hebb
    public void entrenar(int[] patron) {  // Método 'train' en español
        for (int i = 0; i < tamano; i++) {
            for (int j = 0; j < tamano; j++) {
                if (i != j) {  // Evitar autoajustes (no ajustamos cuando i == j)
                    pesos[i][j] += patron[i] * patron[j];
                }
            }
        }
    }

    // Recuperar el patrón corregido (identificación)
    public int[] recuperar(int[] patron) {  // Método 'recall' en español
        int[] resultado = Arrays.copyOf(patron, patron.length);  // Copiamos el patrón

        boolean estable = false;
        while (!estable) {
            estable = true;  // Suponemos que es estable hasta que detectemos un cambio
            for (int i = 0; i < tamano; i++) {
                int suma = 0;
                for (int j = 0; j < tamano; j++) {
                    suma += pesos[i][j] * resultado[j];  // Suma ponderada
                }
                int nuevoValor = suma >= 0 ? 1 : 0;  // Función de activación
                if (nuevoValor != resultado[i]) {
                    estable = false;  // Si hubo un cambio, no es estable
                }
                resultado[i] = nuevoValor;  // Actualizamos el valor
            }
        }
        return resultado;  // Devolvemos el patrón corregido/identificado
    }

    // Mostrar el patrón en la consola
    public void mostrarPatron(int[] patron, int dim) {  // Método 'printPattern' en español
        for (int i = 0; i < patron.length; i++) {
            if (i % dim == 0) System.out.println();  // Saltar de línea por cada fila
            System.out.print(patron[i] == 1 ? "X " : ". ");  // 'X' para 1, '.' para 0
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int dim = 5;  // Dimensiones de la imagen (5x5)
        RedHopfield red = new RedHopfield(dim * dim);  // Inicializamos la red de 5x5 (25 neuronas)

        // Imagen original (patrón del aro "C") en una matriz 5x5
        int[] patronOriginal = {
            0, 1, 1, 1, 0,
            1, 0, 0, 0, 1,
            1, 0, 0, 0, 0,
            1, 0, 0, 0, 1,
            0, 1, 1, 1, 0
        };

        // Imagen con ruido (algunos píxeles alterados)
        int[] patronRuidoso = {
            0, 1, 1, 1, 0,
            1, 0, 0, 1, 1,
            1, 0, 1, 0, 0,
            1, 0, 0, 0, 1,
            0, 1, 0, 1, 0
        };

        // Entrenar la red con el patrón original
        red.entrenar(patronOriginal);

        // Mostrar el patrón original
        System.out.println("Patrón original:");
        red.mostrarPatron(patronOriginal, dim);

        // Mostrar el patrón con ruido
        System.out.println("\nPatrón con ruido:");
        red.mostrarPatron(patronRuidoso, dim);

        // Recuperar el patrón corregido (identificación)
        int[] patronRecuperado = red.recuperar(patronRuidoso);

        // Mostrar el patrón recuperado
        System.out.println("\nPatrón recuperado:");
        red.mostrarPatron(patronRecuperado, dim);
    }
}
